Python OOP Assignment

Q1. What is the purpose of Python's OOP?

In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like 
inheritance, polymorphisms, encapsulation, etc. in the programming. The main concept of OOPs is to bind the data and the functions that work on that together as a
single unit so that no other part of the code can access this data.

Q2. Where does an inheritance search look for an attribute?

The whole point of a namespace tool like the class statement is to support name inheritance. In Python, inheritance happens when an object is qualified, and involves 
searching an attribute definition tree (one or more namespaces). Every time you use an expression of the form object.attr where object is an instance or class object, 
Python searches the namespace tree at and above object, for the first attr it can find. Because lower definitions in the tree override higher ones, inheritance forms 
the basis of specialization.

Q3. How do you distinguish between a class object and an instance object?

Class variables are declared inside a class but outside of any function. 
Instance variables are declared inside the constructor which is the __init__method.

Q4. What makes the first argument in a class’s method function special?

self represents the instance of the class. By using the “self”  we can access the attributes and methods of the class in python. It binds the attributes with the 
given arguments.
The reason you need to use self. is because Python does not use the @ syntax to refer to instance attributes. Python decided to do methods in a way that makes the
instance to which the method belongs be passed automatically, but not received automatically: the first parameter of methods is the instance the method is called 
on.
class check:
    def __init__(self):
        print("Address of self = ",id(self))
  
obj = check()
print("Address of class object = ",id(obj))

Q5. What is the purpose of the init method?

The __init__ method lets the class initialize the object’s attributes and serves no other purpose. It is only used within classes.

Q6. What is the process for creating a class instance?

To create instances of a class, we call the class using class name and pass in whatever arguments its __init__ method accepts

Q7. What is the process for creating a class?

Create a Class. To create a class, useing the keyword class 
Create Object. Now we can use the class named MyClass to create objects
The self Parameter.
Modify Object Properties. 
Delete Object Properties.
Delete Objects.

Q8. How would you define the superclasses of a class?

Object Oriented Programming is re-use. Inheritance is one of the mechanisms to achieve the same. In inheritance, a class (usually called superclass) is inherited by 
another class (usually called subclass). The subclass adds some attributes to superclass.

Q9. What is the relationship between classes and modules?

Use classes as blueprints for objects that model your problem domain.

Use modules to collect functionality into logical units.
Then store data where it makes sense to your application. Global state goes in modules (and functions and classes are just as much global state, loaded at the start).
Everything else goes into other data structures, including instances of classes.

Q10. How do you make instances and classes? 

To create instances of a class, we call the class using class name and pass in whatever arguments its __init__ method accepts

Q11. Where and how should be class attributes created?

To define a class attribute, you place it outside of the __init__() method. Use class_name. class_attribute or object_name. class_attribute to access the value of the 
class_attribute .

Q12. Where and how are instance attributes created?

Instance attributes are defined in the constructor. Defined directly inside a class. Defined inside a constructor using the self parameter.

Q13. What does the term "self" in a Python class mean?

The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.
It does not have to be named self , we can call it whatever you like, but it has to be the first parameter of any function in the class.

Q14. How does a Python class handle operator overloading?

The operator overloading in Python means provide extended meaning beyond their predefined operational meaning. Such as, we use the "+" operator for adding two integers
as well as joining two strings or merging two lists. We can achieve this as the "+" operator is overloaded by the "int" class and "str" class.
methods in our class and operators work according to that behavior defined in methods. When we use + operator, the magic method __add__ is automatically invoked in 
which the operation for + operator is defined. There by changing this magic method’s code, we can give extra meaning to the + operator.

Q15. When do you consider allowing operator overloading of your classes?

Consider that we have two objects which are a physical representation of a class (user-defined data type) and we have to add two objects with binary ‘+’ operator it 
throws an error, because compiler don’t know how to add two objects. So we define a method for an operator and that process is called operator overloading. We can 
overload all existing operators but we can’t create a new operator. To perform operator overloading, Python provides some special function or magic function that is 
automatically invoked when it is associated with that particular operator. For example, when we use + operator, the magic method __add__ is automatically invoked in 
which the operation for + operator is defined.
Overloading binary + operator in Python :
When we use an operator on user defined data types then automatically a special function or magic function associated with that operator is invoked. Changing the
behavior of operator is as simple as changing the behavior of method or function. You define methods in your class and operators work according to that behavior
defined in methods. When we use + operator, the magic method __add__ is automatically invoked in which the operation for + operator is defined. There by changing this 
magic method’s code, we can give extra meaning to the + operator.

Q16. What is the most popular form of operator overloading?

A very popular and convenient example is the Addition (+) operator.
             The ‘+’ operator operates on two numbers and the same operator operates on two strings. It performs “Addition” on numbers whereas it performs 
             “Concatenation” on strings.


Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

Following are the two most important concepts to grasp in order to comprehend Python OOP code are:
Encapsulation: We are forced to encapsulate all of your code into tiny little parts that are separated from each other. Each of those parts can be tested separately,
and when they work, we don’t have to think about them again –we can just use them (it is similar to using functions but A LOT BETTER).

Reusability: When using OO programming in a good way, we will end up reusing your code like never before. It is so easy to re-use that we will probably not only be 
using it in that particular website, but also in every website we ever make during the rest of your life. Write the code one time; use it forever.

Q18. Describe three applications for exception processing.

KeyError=Raised when the specified key is not found in the dictionary.
	
NameError=Raised when an identifier is not found in the local or global namespace.

UnboundLocalError=Raised when trying to access a local variable in a function or method but no value has been assigned to it.

Q19. What happens if you don't do something extra to treat an exception?

An exception object is created when a Python script raises an exception. If the script explicitly doesn't handle the exception, the program will be forced to 
terminate abruptly.

Q20. What are your options for recovering from an exception in your script?

We can also provide a generic except clause, which handles any exception. After the except clause(s), you can include an else-clause. The code in the else-block 
executes if the code in the try: block does not raise an exception. The else-block is a good place for code that does not need the try: block's protection.

Q21. Describe two methods for triggering exceptions in your script.

Try – This method catches the exceptions raised by the program
Raise – Triggers an exception manually using custom exceptions

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of whether or not an exception exists.

Q23. What is the purpose of the try statement?

The try block lets we test a block of code for errors.
The except block lets we handle the error.
The else block lets we execute code when there is no error.

Q24. What are the two most popular try statement variations?

Q25. What is the purpose of the raise statement?

Q26. What does the assert statement do, and what other statement is it like?

Q27. What is the purpose of the with/as argument, and what other statement is it like?

Q28. What are *args, **kwargs?

Q29. How can I pass optional or keyword parameters from one function to another?

Q30. What are Lambda Functions?

Q31. Explain Inheritance in Python with an example?

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?

Q34.Explain the use of the 'nonlocal' keyword in Python.

Q35. What is the global keyword?
